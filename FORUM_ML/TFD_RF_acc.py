import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# üì• ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
file_path = "C:\\Users\\surfa\\OneDrive\\Desktop\\Forum\\Data\\Data_TFD_SMOTE_90.csv"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
df = pd.read_csv(file_path)

# üè∑Ô∏è ‡πÅ‡∏¢‡∏Å Features ‡πÅ‡∏•‡∏∞ Target
X = df.drop('TFD', axis=1)
y = df['TFD']

# ‚úÇÔ∏è ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• train-test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# üîé ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Standardize ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# üéØ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Grid Search
param_grid = {
    'n_estimators': [100, 150, 200],
    'max_depth': [5, 7, 9],   
    'min_samples_split': [5, 10],  
    'min_samples_leaf': [5, 10],  
    'max_features': ['sqrt', 'log2', None],  
    'bootstrap': [True],
    'class_weight': ['balanced', 'balanced_subsample']
}

# üéØ ‡πÉ‡∏ä‡πâ StratifiedKFold ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•
skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

# üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
rf_model = RandomForestClassifier(random_state=42)

# üöÄ ‡πÉ‡∏ä‡πâ Grid Search CV ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ Accuracy ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
grid_search = GridSearchCV(
    estimator=rf_model,
    param_grid=param_grid,
    cv=skf,
    scoring='accuracy',  # ‡πÉ‡∏ä‡πâ Accuracy ‡πÅ‡∏ó‡∏ô F1-score
    n_jobs=-1,
    verbose=2
)

# üöÄ ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
grid_search.fit(X_train, y_train)

# üéØ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
print("\nBest Parameters:")
print(grid_search.best_params_)

# ‚úÖ ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
best_model = grid_search.best_estimator_

# üöÄ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
y_pred_train = best_model.predict(X_train)
y_pred_test = best_model.predict(X_test)

# üéØ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•
train_acc = accuracy_score(y_train, y_pred_train)
test_acc = accuracy_score(y_test, y_pred_test)
cv_acc = grid_search.best_score_

print(f"\nTrain Accuracy: {train_acc:.4f}")
print(f"Test Accuracy: {test_acc:.4f}")
print(f"CV Accuracy: {cv_acc:.4f}")

# üéØ ‡πÅ‡∏™‡∏î‡∏á Classification Report ‡πÅ‡∏•‡∏∞ Confusion Matrix
print("\nClassification Report (Test Set):")
print(classification_report(y_test, y_pred_test))

print("\nConfusion Matrix (Test Set):")
print(confusion_matrix(y_test, y_pred_test))
